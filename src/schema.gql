# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AssignmentEntity {
  assignmentRef: String!
  createdAt: DateTime!
  createdBy: String!
  idAssignment: Float!
  message: String!
  name: String!
  phone: String!
  refIdForm: Float!
  refIdStatus: Float!
  refIdTeamMember: Float!
  status: AssignmentStatusEntity
  updatedAt: DateTime
  updatedBy: String
}

type AssignmentStatusEntity {
  idStatus: Float!
  statusCode: String!
  statusName: String!
}

input CreateAssignmentInput {
  formId: Float!
  teamMemberId: Float!
}

input CreateFormInput {
  formName: String!
}

input CreateQuestionInput {
  formId: Float!
  questionText: String!
}

input CreateTeamMemberInput {
  contact: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  refIdDepartment: Float
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteFormInput {
  formId: Float!
}

input DeleteQuestionInput {
  questionId: Float!
}

type FilterFormResponse {
  hasMore: Boolean!
  items: [FormEntity!]!
  total: Int!
}

type FilterTeamResponse {
  hasMore: Boolean!
  items: [TeamEntity!]!
  total: Int!
}

type FormEntity {
  createdAt: DateTime!
  createdBy: String!
  formIsActive: String!
  formName: String!
  idForm: Float!
  questions: [QuestionEntity!]
  updatedAt: DateTime
  updatedBy: String
}

input FormListingInput {
  limit: Float!
  name: String
  offset: Float!
}

type GetAssignmentResponse {
  assignmentRef: String!
  currentQuestion: QuestionEntity
  questions: [QuestionEntity!]!
  status: AssignmentStatusEntity!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResponse {
  access_token: String!
  user: TeamEntity!
}

type Mutation {
  createAssignmentLink(input: CreateAssignmentInput!): String!
  createForm(input: CreateFormInput!): SuccessResponse!
  createQuestion(input: CreateQuestionInput!): SuccessResponse!
  createTeamMember(input: CreateTeamMemberInput!): SuccessResponse!
  deleteForm(input: DeleteFormInput!): SuccessResponse!
  deleteQuestion(input: DeleteQuestionInput!): SuccessResponse!
  deleteTeamMember(teamMemberId: Float!): SuccessResponse!
  login(input: LoginInput!): LoginResponse!
  reorderQuestion(input: ReorderQuestionInput!): SuccessResponse!
  submitAnswer(input: SubmitAnswerInput!): SuccessResponse!
  updateForm(input: UpdateFormInput!): SuccessResponse!
  updateQuestion(input: UpdateQuestionInput!): SuccessResponse!
  updateTeamMember(input: UpdateTeamMemberInput!): SuccessResponse!
}

type Query {
  getAllForms(input: FormListingInput!): FilterFormResponse!
  getAllTeamMembers(input: TeamListingInput!): FilterTeamResponse!
  getAssignment(assignmentRef: String!): GetAssignmentResponse!
  getFormDetails(formId: Float!): FormEntity!
  getHello: String!
  getTeamMemberDetails(input: Float!): TeamMemberDetailsResponse!
  listAllForms: [FormEntity!]!
}

type QuestionEntity {
  createdAt: DateTime!
  createdBy: String!
  idQuestion: Float!
  isActive: String
  questionDetails: String!
  questionOrder: Float!
  questionType: QuestionTypeEntity
  refIdForm: Float!
  refIdQuestionType: Float
  updatedAt: DateTime
  updatedBy: String
}

type QuestionTypeEntity {
  idQuestionType: Float!
  questionTypeCode: String!
  questionTypeName: String!
}

enum REORDER_DIRECTION {
  DOWNWARDS
  UPWARDS
}

input ReorderQuestionInput {
  direction: REORDER_DIRECTION!
  questionId: Float!
}

input SubmitAnswerInput {
  answer: String!
  assignmentRef: String!
  questionId: Float!
}

type SuccessResponse {
  message: String
  success: Boolean!
}

type TeamEntity {
  contact: String!
  createdAt: DateTime!
  createdBy: String!
  email: String!
  firstName: String!
  idTeamMember: Float
  isActive: String
  lastName: String!
  password: String!
  refIdDepartment: Float
  updatedAt: DateTime
  updatedBy: String
  username: String
}

input TeamListingInput {
  limit: Float!
  name: String
  offset: Float!
}

type TeamMemberCommentType {
  createdAt: DateTime!
  message: String!
}

type TeamMemberDetailsResponse {
  details: TeamEntity!
  recentComments: [TeamMemberCommentType!]
  recentSubmissions: [AssignmentEntity!]
}

input UpdateFormInput {
  formId: Float!
  formName: String!
}

input UpdateQuestionInput {
  questionId: Float!
  questionText: String!
}

input UpdateTeamMemberData {
  contact: String
  email: String
  firstName: String
  lastName: String
  password: String
  refIdDepartment: Float
  username: String
}

input UpdateTeamMemberInput {
  data: UpdateTeamMemberData!
  teamMemberId: Float!
}